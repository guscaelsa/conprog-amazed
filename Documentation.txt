                 ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
                          AMAZED DOCUMENTATION

                  Matthijs de Vries and Elsa Carlsson
                 ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━





1 Data structures
═════════════════

  The frontier stack is entirely local; every thread is searching
  through one part of the maze independently. Therefore it can continue
  to simply be a `Stack'.

  To prevent multiple threads from visited the same node, the
  visited-set must be shared. The most natural choice for this is
  `java.util.concurrent.ConcurrentSkipListSet'.

  The predecessor-map does not need to be shared but needs to be
  inherited by child threads as they need to know how their parent got
  to where they start.


2 Algorithm
═══════════

  ⁃ Start by pushing the start node onto the frontier stack.
  ⁃ Until the frontier becomes empty:
    ⁃ Pop a “current” node from the frontier
    ⁃ Try to visit the current node, else continue loop
    ⁃ If current is a goal:
      ⁃ Set termination flag
      ⁃ Return the found path
    ⁃ Otherwise, loop through all neighbors:
      ⁃ If termination flag is set, break out of (inner) loop
      ⁃ If this neighbor is already in the predecessor map, continue
        (inner) loop
      ⁃ Update predecessor map
      ⁃ Either: fork a child
      ⁃ Or: push to frontier
    ⁃ If termination flag is set, break out of loop
  ⁃ Loop through all children:
    ⁃ Join the child and look at its result
    ⁃ If it found a path, return that
  ⁃ return null


3 Synchronization
═════════════════

  The threads are synchronized using two objects: the visited-map and
  the termination flag. These are a
  `java.util.concurrent.ConcurrentSkipListSet' and a
  `java.util.concurrent.atomic.AtomicBoolean' respectively.

  These classes are lock-free, and since we don’t use any other
  synchronization our search is also lock-free.

  There is no data races when we use `ConcurrentSkipListSet' because
  each thread checks if a node is free and takes control of it in a
  single atomic operation, using `visited.add(current)' (and checking
  the return value).

  And there is no data races in our use of `AtomicBoolean' either,
  because we never rely on the timing on when this is set. It starts of
  false and is eventually set to true, and all threads will eventually
  check it and see the new value.
